/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package uhu.amc1a;

import java.awt.Cursor;
import java.text.DecimalFormat;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;

/**
 *
 * @author diego
 */
public class Opcion4 extends javax.swing.JFrame {

    /**
     * Creates new form Opcion4
     */
    public Opcion4() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bok = new javax.swing.JButton();
        bcancel = new javax.swing.JButton();
        lab1 = new javax.swing.JLabel();
        lab2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bok.setText("OK");
        bok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bokActionPerformed(evt);
            }
        });

        bcancel.setText("CANCEL");
        bcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcancelActionPerformed(evt);
            }
        });

        lab1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab1.setText("Este proceso puede tardar un tiempo.");

        lab2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lab2.setText("¿Comenzar?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bcancel))
                    .addComponent(lab1))
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lab2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lab1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lab2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bok)
                    .addComponent(bcancel))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bokActionPerformed
        try {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            //definir tallas y num de iteraciones
            int T[] = {200, 500, 1500, 3250, 5000};
            int N = 10;
            Busqueda b[][] = new Busqueda[T.length][N];
            //crear arrays
            for (int i = 0; i < T.length; i++) {
                for (int j = 0; j < N; j++) {
                    Punto tmp[] = new Punto[T[i]];
                    Punto.rellenar(tmp, T[i], Menu.peor);
                    b[i][j] = new Busqueda(tmp);
                }
            }
            //hacer busquedas
            for (int i = 0; i < T.length; i++) {
                for (int j = 0; j < N; j++) {
                    b[i][j].exhaustiva();
                    b[i][j].poda();
                    b[i][j].dyv();
                    b[i][j].dyvplus();
                }
            }
            //calcular medias
            double[][] tablaT = new double[T.length][Busqueda.NUM];
            for (int i = 0; i < T.length; i++) {
                for (int j = 0; j < Busqueda.NUM; j++) {
                    tablaT[i][j] = 0.0;
                }
            }
            for (int i = 0; i < T.length; i++) {
                for (int j = 0; j < N; j++) {
                    tablaT[i][0] = tablaT[i][0] + b[i][j].t[0];
                    tablaT[i][1] = tablaT[i][1] + b[i][j].t[1];
                    tablaT[i][2] = tablaT[i][2] + b[i][j].t[2];
                    tablaT[i][3] = tablaT[i][3] + b[i][j].t[3];
                }
            }
            //definir formato de salida
            DecimalFormat tp = new DecimalFormat("0.0000");
            double nanoMedia = 1000000.0 * (double) (N);
            //rellenar tabla
            String[] atributos = {"Talla",
                "Exhaustiva",
                "Poda",
                "DyV",
                "DyVPlus"};
            Object[][] datos = {
                {" ", "Tiempo(ms)", "Tiempo(ms)", "Tiempo(ms)", "Tiempo(ms)"},
                {T[0], tp.format(tablaT[0][0] / nanoMedia), tp.format(tablaT[0][1] / nanoMedia), tp.format(tablaT[0][2] / nanoMedia), tp.format(tablaT[0][3] / nanoMedia)},
                {T[1], tp.format(tablaT[1][0] / nanoMedia), tp.format(tablaT[1][1] / nanoMedia), tp.format(tablaT[1][2] / nanoMedia), tp.format(tablaT[1][3] / nanoMedia)},
                {T[2], tp.format(tablaT[2][0] / nanoMedia), tp.format(tablaT[2][1] / nanoMedia), tp.format(tablaT[2][2] / nanoMedia), tp.format(tablaT[2][3] / nanoMedia)},
                {T[3], tp.format(tablaT[3][0] / nanoMedia), tp.format(tablaT[3][1] / nanoMedia), tp.format(tablaT[3][2] / nanoMedia), tp.format(tablaT[3][3] / nanoMedia)},
                {T[4], tp.format(tablaT[4][0] / nanoMedia), tp.format(tablaT[4][1] / nanoMedia), tp.format(tablaT[4][2] / nanoMedia), tp.format(tablaT[4][3] / nanoMedia)}
            };
            //mostrar tabla
            JTable t = new JTable(datos, atributos);
            t.setEnabled(false);
            JScrollPane sp = new JScrollPane(t);
            JFrame f = new JFrame();
            f.add(sp);
            f.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            f.setBounds(700, 200, 700, 150);
            f.setTitle("Comparación de estrategias");
            f.setVisible(true);
            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            this.setVisible(false);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_bokActionPerformed

    private void bcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_bcancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new Opcion4().setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bcancel;
    private javax.swing.JButton bok;
    private javax.swing.JLabel lab1;
    private javax.swing.JLabel lab2;
    // End of variables declaration//GEN-END:variables
}
